{"ast":null,"code":"var _jsxFileName = \"/Users/borjamartirubio/Desktop/dashboard-app/src/Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, ReferenceLine } from 'recharts';\nimport Papa from 'papaparse';\nimport _ from 'lodash';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst COLORS = ['#8884d8', '#82ca9d', '#ffc658', '#ff7300', '#ff0000', '#00ff00'];\n\n// Function to format the date from \"YYYYmM\" to \"YYYY-MM\"\nconst formatDate = dateStr => {\n  if (!dateStr) return '';\n  const [year, month] = dateStr.split('m');\n  return `${year}-${month.padStart(2, '0')}`;\n};\n\n// Function to convert graduation date (MMM-YY) to chart format (YYYYmM)\nconst convertGradDate = gradDate => {\n  if (!gradDate) return '';\n  const [month, year] = gradDate.split('-');\n  const monthNum = new Date(Date.parse(month + \" 1, 2000\")).getMonth() + 1;\n  return `20${year}m${monthNum}`;\n};\nconst CityChart = ({\n  data,\n  city,\n  selectedVars\n}) => {\n  var _data$, _data$2;\n  // Get the impdate and graddate for this city (assuming they're the same for all rows of a city)\n  const impDate = (_data$ = data[0]) === null || _data$ === void 0 ? void 0 : _data$.impdate;\n  const gradDate = (_data$2 = data[0]) === null || _data$2 === void 0 ? void 0 : _data$2.graduationdate;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mb-8 border rounded p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"text-lg font-medium mb-2\",\n      children: city\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: '400px'\n      },\n      children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n        children: /*#__PURE__*/_jsxDEV(LineChart, {\n          data: data,\n          children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n            strokeDasharray: \"3 3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            dataKey: \"date\",\n            tickFormatter: formatDate,\n            interval: 3,\n            angle: 90,\n            dx: 10,\n            dy: 20,\n            height: 70,\n            tick: {\n              fontSize: 10\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n            labelFormatter: formatDate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n            x: impDate,\n            stroke: \"red\",\n            strokeDasharray: \"3 3\",\n            label: {\n              value: 'imp date',\n              angle: 90,\n              position: 'insideTopRight',\n              fill: 'red',\n              fontSize: 9,\n              offset: 5,\n              backgroundColor: 'white',\n              padding: 2,\n              dy: 50\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n            x: convertGradDate(gradDate),\n            stroke: \"blue\",\n            strokeDasharray: \"3 3\",\n            label: {\n              value: 'grad date',\n              angle: 90,\n              position: 'insideTopRight',\n              fill: 'blue',\n              fontSize: 9,\n              offset: 5,\n              backgroundColor: 'white',\n              padding: 2,\n              dy: 50\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this), selectedVars.nac_wraadj_total_imp && /*#__PURE__*/_jsxDEV(Line, {\n            type: \"monotone\",\n            dataKey: \"nac_wraadj_total_imp\",\n            stroke: COLORS[0],\n            name: \"NAC Wrap Adj Total (Imp)\",\n            dot: false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 15\n          }, this), selectedVars.totalreportingsdp_imp && /*#__PURE__*/_jsxDEV(Line, {\n            type: \"monotone\",\n            dataKey: \"totalreportingsdp_imp\",\n            stroke: COLORS[1],\n            name: \"Total Reporting SDP (Imp)\",\n            dot: false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }, this), selectedVars.totalreportingsdp && /*#__PURE__*/_jsxDEV(Line, {\n            type: \"monotone\",\n            dataKey: \"totalreportingsdp\",\n            stroke: COLORS[2],\n            name: \"Total Reporting SDP\",\n            dot: false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 15\n          }, this), selectedVars.nac_wraadj_total && /*#__PURE__*/_jsxDEV(Line, {\n            type: \"monotone\",\n            dataKey: \"nac_wraadj_total\",\n            stroke: COLORS[3],\n            name: \"NAC Wrap Adj Total\",\n            dot: false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }, this), selectedVars.nac_alladj_total_imp && /*#__PURE__*/_jsxDEV(Line, {\n            type: \"monotone\",\n            dataKey: \"nac_alladj_total_imp\",\n            stroke: COLORS[4],\n            name: \"NAC All Adj Total (Imp)\",\n            dot: false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 15\n          }, this), selectedVars.nac_alladj_total && /*#__PURE__*/_jsxDEV(Line, {\n            type: \"monotone\",\n            dataKey: \"nac_alladj_total\",\n            stroke: COLORS[5],\n            name: \"NAC All Adj Total\",\n            dot: false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_c = CityChart;\nconst Dashboard = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [countries, setCountries] = useState([]);\n  const [cities, setCities] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState('');\n  const [selectedCities, setSelectedCities] = useState([]);\n  const [selectedVars, setSelectedVars] = useState({\n    nac_wraadj_total_imp: true,\n    totalreportingsdp_imp: true,\n    totalreportingsdp: true,\n    nac_wraadj_total: true,\n    nac_alladj_total_imp: true,\n    nac_alladj_total: true\n  });\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        // Use different paths for development and production\n        const basePath = process.env.PUBLIC_URL || '';\n        const response = await fetch(`${basePath}/data.csv`);\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const text = await response.text();\n        const result = Papa.parse(text, {\n          header: true,\n          dynamicTyping: true,\n          skipEmptyLines: true\n        });\n        setData(result.data);\n        const uniqueCountries = _.uniq(result.data.map(row => row.country)).sort();\n        setCountries(uniqueCountries);\n      } catch (error) {\n        console.error('Error loading data:', error);\n      }\n    };\n    loadData();\n  }, []);\n  useEffect(() => {\n    if (selectedCountry) {\n      const countryCities = _.uniq(data.filter(row => row.country === selectedCountry).map(row => row.city)).sort();\n      setCities(countryCities);\n      setSelectedCities([]);\n    }\n  }, [selectedCountry, data]);\n  const handleCountryChange = e => {\n    setSelectedCountry(e.target.value);\n  };\n  const handleCityChange = e => {\n    const city = e.target.value;\n    setSelectedCities(prev => prev.includes(city) ? prev.filter(c => c !== city) : [...prev, city]);\n  };\n  const handleVarChange = variable => {\n    setSelectedVars(prev => ({\n      ...prev,\n      [variable]: !prev[variable]\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 max-w-6xl mx-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"Dashboard - TCI\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-6 grid grid-cols-1 md:grid-cols-2 gap-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"block text-sm font-medium mb-1\",\n          children: \"Select Country:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedCountry,\n          onChange: handleCountryChange,\n          className: \"w-full p-2 border rounded\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select a country...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 13\n          }, this), countries.map(country => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: country,\n            children: country\n          }, country, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"block text-sm font-medium mb-1\",\n          children: \"Select Variables:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"space-y-2\",\n          children: Object.keys(selectedVars).map((variable, idx) => /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"flex items-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: selectedVars[variable],\n              onChange: () => handleVarChange(variable),\n              className: \"mr-2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                color: COLORS[idx]\n              },\n              children: variable\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 17\n            }, this)]\n          }, variable, true, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), selectedCountry && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"block text-sm font-medium mb-1\",\n        children: \"Select Cities:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"flex items-center font-medium\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: selectedCities.length === cities.length,\n            onChange: e => {\n              if (e.target.checked) {\n                setSelectedCities(cities);\n              } else {\n                setSelectedCities([]);\n              }\n            },\n            className: \"mr-2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 15\n          }, this), \"Select All\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 13\n        }, this), cities.map(city => /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"flex items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            value: city,\n            checked: selectedCities.includes(city),\n            onChange: handleCityChange,\n            className: \"mr-2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 17\n          }, this), city]\n        }, city, true, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-8\",\n      children: selectedCities.map(city => {\n        const cityData = data.filter(row => row.city === city).map(row => ({\n          date: row.reportingdate,\n          ...row\n        }));\n        return /*#__PURE__*/_jsxDEV(CityChart, {\n          data: cityData,\n          city: city,\n          selectedVars: selectedVars\n        }, city, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 7\n    }, this), selectedCountry && selectedCities.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please select one or more cities\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"6to8k3Pdud/SN5Ms67Bd5+W1Sw0=\");\n_c2 = Dashboard;\nexport default Dashboard;\nvar _c, _c2;\n$RefreshReg$(_c, \"CityChart\");\n$RefreshReg$(_c2, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","ReferenceLine","Papa","_","jsxDEV","_jsxDEV","COLORS","formatDate","dateStr","year","month","split","padStart","convertGradDate","gradDate","monthNum","Date","parse","getMonth","CityChart","data","city","selectedVars","_data$","_data$2","impDate","impdate","graduationdate","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","height","strokeDasharray","dataKey","tickFormatter","interval","angle","dx","dy","tick","fontSize","labelFormatter","x","stroke","label","value","position","fill","offset","backgroundColor","padding","nac_wraadj_total_imp","type","name","dot","totalreportingsdp_imp","totalreportingsdp","nac_wraadj_total","nac_alladj_total_imp","nac_alladj_total","_c","Dashboard","_s","setData","countries","setCountries","cities","setCities","selectedCountry","setSelectedCountry","selectedCities","setSelectedCities","setSelectedVars","loadData","basePath","process","env","PUBLIC_URL","response","fetch","ok","Error","status","text","result","header","dynamicTyping","skipEmptyLines","uniqueCountries","uniq","map","row","country","sort","error","console","countryCities","filter","handleCountryChange","e","target","handleCityChange","prev","includes","c","handleVarChange","variable","onChange","Object","keys","idx","checked","color","length","cityData","date","reportingdate","_c2","$RefreshReg$"],"sources":["/Users/borjamartirubio/Desktop/dashboard-app/src/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, ReferenceLine } from 'recharts';\nimport Papa from 'papaparse';\nimport _ from 'lodash';\n\nconst COLORS = ['#8884d8', '#82ca9d', '#ffc658', '#ff7300', '#ff0000', '#00ff00'];\n\n// Function to format the date from \"YYYYmM\" to \"YYYY-MM\"\nconst formatDate = (dateStr) => {\n  if (!dateStr) return '';\n  const [year, month] = dateStr.split('m');\n  return `${year}-${month.padStart(2, '0')}`;\n};\n\n// Function to convert graduation date (MMM-YY) to chart format (YYYYmM)\nconst convertGradDate = (gradDate) => {\n  if (!gradDate) return '';\n  const [month, year] = gradDate.split('-');\n  const monthNum = new Date(Date.parse(month + \" 1, 2000\")).getMonth() + 1;\n  return `20${year}m${monthNum}`;\n};\n\nconst CityChart = ({ data, city, selectedVars }) => {\n  // Get the impdate and graddate for this city (assuming they're the same for all rows of a city)\n  const impDate = data[0]?.impdate;\n  const gradDate = data[0]?.graduationdate;\n\n  return (\n    <div className=\"mb-8 border rounded p-4\">\n      <h3 className=\"text-lg font-medium mb-2\">{city}</h3>\n      <div style={{ height: '400px' }}>\n        <ResponsiveContainer>\n          <LineChart data={data}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis \n              dataKey=\"date\" \n              tickFormatter={formatDate}\n              interval={3}\n              angle={90}\n              dx={10}\n              dy={20}\n              height={70}\n              tick={{\n                fontSize: 10\n              }}\n            />\n            <YAxis />\n            <Tooltip \n              labelFormatter={formatDate}\n            />\n            <Legend />\n            {/* Implementation date line */}\n            <ReferenceLine \n              x={impDate} \n              stroke=\"red\" \n              strokeDasharray=\"3 3\" \n              label={{ \n                value: 'imp date', \n                angle: 90,\n                position: 'insideTopRight',\n                fill: 'red',\n                fontSize: 9,\n                offset: 5,\n                backgroundColor: 'white',\n                padding: 2,\n                dy: 50\n              }} \n            />\n            {/* Graduation date line */}\n            <ReferenceLine \n              x={convertGradDate(gradDate)} \n              stroke=\"blue\" \n              strokeDasharray=\"3 3\" \n              label={{ \n                value: 'grad date', \n                angle: 90,\n                position: 'insideTopRight',\n                fill: 'blue',\n                fontSize: 9,\n                offset: 5,\n                backgroundColor: 'white',\n                padding: 2,\n                dy: 50\n              }} \n            />\n            {selectedVars.nac_wraadj_total_imp && (\n              <Line type=\"monotone\" dataKey=\"nac_wraadj_total_imp\" stroke={COLORS[0]} name=\"NAC Wrap Adj Total (Imp)\" dot={false} />\n            )}\n            {selectedVars.totalreportingsdp_imp && (\n              <Line type=\"monotone\" dataKey=\"totalreportingsdp_imp\" stroke={COLORS[1]} name=\"Total Reporting SDP (Imp)\" dot={false} />\n            )}\n            {selectedVars.totalreportingsdp && (\n              <Line type=\"monotone\" dataKey=\"totalreportingsdp\" stroke={COLORS[2]} name=\"Total Reporting SDP\" dot={false} />\n            )}\n            {selectedVars.nac_wraadj_total && (\n              <Line type=\"monotone\" dataKey=\"nac_wraadj_total\" stroke={COLORS[3]} name=\"NAC Wrap Adj Total\" dot={false} />\n            )}\n            {selectedVars.nac_alladj_total_imp && (\n              <Line type=\"monotone\" dataKey=\"nac_alladj_total_imp\" stroke={COLORS[4]} name=\"NAC All Adj Total (Imp)\" dot={false} />\n            )}\n            {selectedVars.nac_alladj_total && (\n              <Line type=\"monotone\" dataKey=\"nac_alladj_total\" stroke={COLORS[5]} name=\"NAC All Adj Total\" dot={false} />\n            )}\n          </LineChart>\n        </ResponsiveContainer>\n      </div>\n    </div>\n  );\n};\n\nconst Dashboard = () => {\n  const [data, setData] = useState([]);\n  const [countries, setCountries] = useState([]);\n  const [cities, setCities] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState('');\n  const [selectedCities, setSelectedCities] = useState([]);\n  const [selectedVars, setSelectedVars] = useState({\n    nac_wraadj_total_imp: true,\n    totalreportingsdp_imp: true,\n    totalreportingsdp: true,\n    nac_wraadj_total: true,\n    nac_alladj_total_imp: true,\n    nac_alladj_total: true\n  });\n\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        // Use different paths for development and production\n        const basePath = process.env.PUBLIC_URL || '';\n        const response = await fetch(`${basePath}/data.csv`);\n        \n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const text = await response.text();\n        const result = Papa.parse(text, {\n          header: true,\n          dynamicTyping: true,\n          skipEmptyLines: true\n        });\n        \n        setData(result.data);\n        \n        const uniqueCountries = _.uniq(result.data.map(row => row.country)).sort();\n        setCountries(uniqueCountries);\n        \n      } catch (error) {\n        console.error('Error loading data:', error);\n      }\n    };\n\n    loadData();\n  }, []);\n\n  useEffect(() => {\n    if (selectedCountry) {\n      const countryCities = _.uniq(\n        data\n          .filter(row => row.country === selectedCountry)\n          .map(row => row.city)\n      ).sort();\n      setCities(countryCities);\n      setSelectedCities([]);\n    }\n  }, [selectedCountry, data]);\n\n  const handleCountryChange = (e) => {\n    setSelectedCountry(e.target.value);\n  };\n\n  const handleCityChange = (e) => {\n    const city = e.target.value;\n    setSelectedCities(prev => \n      prev.includes(city) \n        ? prev.filter(c => c !== city)\n        : [...prev, city]\n    );\n  };\n\n  const handleVarChange = (variable) => {\n    setSelectedVars(prev => ({\n      ...prev,\n      [variable]: !prev[variable]\n    }));\n  };\n\n  return (\n    <div className=\"p-4 max-w-6xl mx-auto\">\n      <h1 className=\"text-2xl font-bold mb-4\">Dashboard - TCI</h1>\n      \n      <div className=\"mb-6 grid grid-cols-1 md:grid-cols-2 gap-4\">\n        {/* Country Selection */}\n        <div>\n          <label className=\"block text-sm font-medium mb-1\">Select Country:</label>\n          <select \n            value={selectedCountry} \n            onChange={handleCountryChange}\n            className=\"w-full p-2 border rounded\"\n          >\n            <option value=\"\">Select a country...</option>\n            {countries.map(country => (\n              <option key={country} value={country}>{country}</option>\n            ))}\n          </select>\n        </div>\n\n        {/* Variables Selection */}\n        <div>\n          <label className=\"block text-sm font-medium mb-1\">Select Variables:</label>\n          <div className=\"space-y-2\">\n            {Object.keys(selectedVars).map((variable, idx) => (\n              <label key={variable} className=\"flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  checked={selectedVars[variable]}\n                  onChange={() => handleVarChange(variable)}\n                  className=\"mr-2\"\n                />\n                <span style={{ color: COLORS[idx] }}>{variable}</span>\n              </label>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* City Selection */}\n      {selectedCountry && (\n        <div className=\"mb-6\">\n          <label className=\"block text-sm font-medium mb-1\">Select Cities:</label>\n          <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2\">\n            {/* Select All checkbox */}\n            <label className=\"flex items-center font-medium\">\n              <input\n                type=\"checkbox\"\n                checked={selectedCities.length === cities.length}\n                onChange={(e) => {\n                  if (e.target.checked) {\n                    setSelectedCities(cities);\n                  } else {\n                    setSelectedCities([]);\n                  }\n                }}\n                className=\"mr-2\"\n              />\n              Select All\n            </label>\n            {cities.map(city => (\n              <label key={city} className=\"flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  value={city}\n                  checked={selectedCities.includes(city)}\n                  onChange={handleCityChange}\n                  className=\"mr-2\"\n                />\n                {city}\n              </label>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Charts */}\n      <div className=\"mt-8\">\n        {selectedCities.map(city => {\n          const cityData = data\n            .filter(row => row.city === city)\n            .map(row => ({\n              date: row.reportingdate,\n              ...row\n            }));\n\n          return (\n            <CityChart \n              key={city}\n              data={cityData}\n              city={city}\n              selectedVars={selectedVars}\n            />\n          );\n        })}\n      </div>\n\n      {selectedCountry && selectedCities.length === 0 && (\n        <p>Please select one or more cities</p>\n      )}\n    </div>\n  );\n};\n\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}